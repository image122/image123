
import { GoogleGenAI, Modality } from "@google/genai";

const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      // Result is "data:mime/type;base64,the-base64-string"
      // We want to remove the prefix
      const result = reader.result as string;
      resolve(result.split(',')[1]);
    };
    reader.onerror = (error) => reject(error);
  });
};

export const editImageWithGemini = async (imageFiles: File[], prompt: string): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  try {
    const base64ImagePromises = imageFiles.map(file => fileToBase64(file));
    const base64ImagesData = await Promise.all(base64ImagePromises);

    const imageParts = base64ImagesData.map((data, index) => ({
      inlineData: {
        data: data,
        mimeType: imageFiles[index].type,
      },
    }));

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          ...imageParts,
          {
            text: prompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    // Find the image part in the response
    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        // The API returns a different MIME type, so let's use a common one like PNG for the data URL
        const imageUrl = `data:image/png;base64,${base64ImageBytes}`;
        return imageUrl;
      }
    }

    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error editing image with Gemini:", error);
    throw new Error("Failed to generate image. Please check the console for more details.");
  }
};
